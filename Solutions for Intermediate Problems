---------------1. Binary Tree Nodes---------------
SELECT N,
CASE
    WHEN P is null THEN 'Root'
    WHEN N in (SELECT P FROM bst) THEN 'Inner'
    Else 'Leaf'
END
from BST
ORDER BY N;

---------------2. New Companies---------------
SELECT  e.company_code, c.founder, COUNT(DISTINCT e.lead_manager_code),
COUNT(DISTINCT e.senior_manager_code),
COUNT(DISTINCT e.manager_code),
COUNT(DISTINCT e.employee_code)
FROM Employee e
    inner join Company c
    on e.company_code = c.company_code
GROUP BY 1,2
ORDER BY 1 asc;

---------------3. Ollivander's Inventory---------------
with base as(
    SELECT code, age FROM wands_property
    WHERE is_evil = 0
    GROUP BY code, age  
),

final as(
SELECT w.id, w.code, w.coins_needed, w.power, p.age,
    row_number() over (partition by w.code, w.power order by w.power desc, w.coins_needed asc) rank_val
    FROM wands w
    inner join base p
    on w.code =p.code
)

SELECT id, age, coins_needed, power FROM final
WHER rank_val=1
order by power desc, age desc;

---------------4. Weather Observation Station 20 to find median of the Northern Latitudes---------------

SELECT ROUND(AVG(LAT_N),4) FROM(
SELECT *, count(*) over() as lat_cont,
row_number() over(order by LAT_N asc) row_val
from STATION
GROUP BY 1,2,3,4,5
ORDER BY LAT_N
) a
where row_val in (floor((lat_cont+1)/2), ceiling((lat_cont+1)/2));

---------------5. Interviews---------------
SELECT c.contest_id, c.hacker_id, c.name,
sum(total_submission), sum(total_accepted_submission), 
sum(total_view), sum(total_unique_view)
    FROM Contests c
    INNER JOIN Colleges co
    ON c.contest_id = co.contest_id
    INNER JOIN challenges ch
    ON co.college_id = ch.college_id
    LEFT JOIN (
        SELECT challenge_id, sum(total_submissions) total_submission, sum(total_accepted_submissions) total_accepted_submission 
       FROM submission_stats 
       GROUP BY 1
    ) as s
    ON ch.challenge_id = s.challenge_id
    LEFT JOIN (
        SELECT challenge_id, sum(total_views) total_view, sum(total_unique_views) total_unique_view 
        FROM view_stats 
        GROUP BY 1
    ) as m
    ON ch.challenge_id = m.challenge_id
GROUP BY 1,2,3
ORDER BY 1;

---------------6. The Report---------------
WITH base as(
SELECT s.*, g.* 
FROM Students s
LEFT JOIN grades g
on s.marks >= min_mark and s.marks<= max_mark
    ),   
 final as(   
    SELECT name, grade, marks
        FROM base
        WHERE grade >= 8 
    UNION ALL
    SELECT 'NULL' as name, grade, marks
        FROM base
        WHERE grade <8
 ) 
 SELECT * FROM final
ORDER BY grade desc, name asc;

---------------7. Top Compitators---------------
SELECT concat(h.hacker_id, '  ', h.name)
FROM hackers h 
    INNER JOIN submissions s
    ON h.hacker_id = s.hacker_id
    INNER JOIN Challenges c
    ON s.challenge_id = c.challenge_id
INNER JOIN difficulty d
ON c.difficulty_level = d.difficulty_level
    WHERE d.score =s.score
GROUP BY h.hacker_id, h.name
HAVING count(*)>1
ORDER BY count(*) desc, h.hacker_id asc;

